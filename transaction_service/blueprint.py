import uuid
from datetime import datetime
from flask import Blueprint, jsonify, request, current_app
# from neo4j import GraphDatabase
# import redis
import json
import logging
import neo4j

from neo4j_service import TransactionRepository

# neo4j_driver = GraphDatabase.driver(
#     "bolt://neo4j:7687",
#     auth=("neo4j", "12345678")
# )
#
# redis_client = redis.Redis(
#     host='redis',
#     port= 6379,
#     decode_responses=True
# )

# class TransactionRepository:
#     def __init__(self, driver):
#         self.driver = driver
#
#
#     def create_transaction(self, transaction_data):
#         query = """
#                     MERGE (source:Account {account_id: $source_id})
#                     MERGE (target:Account {account_id: $target_id})
#                     CREATE (source)-[t:TRANSACTION {
#                         transaction_id: $transaction_id,
#                         amount: $amount,
#                         timestamp: datetime($timestamp),
#                         currency: $currency
#                     }]->(target)
#                     RETURN t.transaction_id as transaction_id
#                     """
#         with self.driver.session() as session:
#             result = session.run(query, {
#                 'source_id': transaction_data['source_id'],
#                 'target_id': transaction_data['target_id'],
#                 # the transaction id is generated by the uuid library
#                 'transaction_id': str(uuid.uuid4()),
#                 'amount': transaction_data['amount'],
#                 'timestamp': datetime.strptime(transaction_data['timestamp'], '%d/%m/%Y, %H:%M:%S'),
#                 'currency': transaction_data['currency']
#             })
#             return result.single()['transaction_id']
#
#     def get_transaction(self, transaction_id):
#         with self.driver.session() as session:
#             query = """
#             MATCH (source)-[t:TRANSACTION {transaction_id: $transaction_id}]->(target)
#             RETURN source.source_id as source_id,
#                     target.target_id as target_id,
#                     t.amount as amount,
#                     t.timestamp as timestamp,
#                     t.currency as currency
#             """
#             result = session.run(query, {'transaction_id': transaction_id})
#             record = result.single()
#             if record:
#                 return self._serialize_transaction(record)
#             return None
#
#     def _serialize_transaction(self, record):
#         """Helper function to serialize transaction records."""
#         transaction = dict(record)
#         if isinstance(transaction.get("timestamp"), neo4j.time.DateTime):
#             # Convert Neo4j DateTime to ISO-8601 string
#             transaction["timestamp"] = transaction["timestamp"].iso_format()
#         return transaction

transaction_bp = Blueprint('transaction', __name__)

@transaction_bp.route('/api/v1/transaction', methods=['POST'])
def create_transaction():
    data = request.get_json()  # קבלת הנתונים מגוף הבקשה
    required_fields = ['source_id', 'target_id', 'amount', 'timestamp', 'currency']
    if not all(field in data for field in required_fields):
        return jsonify({'error': 'Missing required fields'}), 400

    try:
        print(f"Neo4j Driver: {current_app.neo4j_driver}")

        repo = TransactionRepository(current_app.neo4j_driver)
        transaction_id = repo.create_transaction(data)

        current_app.redis_client.lpush(
            'recent_transactions',
            json.dumps({**data, 'transaction_id': transaction_id})
        )
        current_app.redis_client.ltrim('recent_transactions', 0, 999)

        return jsonify({
            'status': 'success',
            'transaction_id': transaction_id
        }), 201
    except Exception as e:
        print(f'Error in POST /api/v1/transaction: {str(e)}')
        logging.error(f'Error in POST /api/v1/transaction: {str(e)}')
        return jsonify({'error': 'internal server error'}), 500


@transaction_bp.route('/api/v1/transaction/<transaction_id>', methods=['GET'])
def get_transaction(transaction_id):
    try:
        repo = TransactionRepository(current_app.neo4j_driver)
        transaction = repo.get_transaction(transaction_id)

        return jsonify(transaction), 200
    except Exception as e:
        print(f'Error in GET /api/v1/transaction: {str(e)}')
        logging.error(f'Error in GET /api/v1/transaction: {str(e)}')
        return jsonify({'error': 'internal server error'}), 500


@transaction_bp.route('/api/v1/transaction/search', methods=['GET'])
def search_transactions():
    return jsonify({"message": "Transaction searched"}), 200

